PHP 代码运行流程

*.PHP (scanner) ---> Exprs (Parser) ---> Opcodes (Exec) ---> Output

优化点 PHP 内置函数的性能优劣

情况描述 PHP 内置函数 之间依然存在快慢差异

好的建议 多去了解 PHP 内置涵数的时间复杂度

vim test_arraykey.php

优化点 尽可能少用魔法函数

情况描述 PHP 提供的魔法函数 性能不佳

为什么性能低 为了给PHP 程序员省事 PHP 语言做了很多

好的方法 尽可能规避使用 PHP 魔法函数

linux time php test_magic.php

优化点 产生额外开销的错误抑制符 @

情况描述 PHP 提供的错误抑制符只是为了方便 '懒人'

@的实际逻辑 在代码开始前 结束后 增加 Opcode 忽略报错

好的建议 建议尽量不要使用 @ 错误抑制符

php -dvld.active=1 -dvld.execute=0 at.php

BEGIN_SILENCE END_SILENCE

优化点 合理使用内存

情况描述 PHP 有内存回收机制保底 但也请小心使用内存

好的建议 利用 unset() 及时释放不使用的内存 (注: unset() 出现注销不掉的情况)

优化点 尽量少的使用正则表达式

情况描述 正则表达式的回溯开销较大 "没有金刚钻别揽瓷器活"

好的建议 利用字符串处理函数 实现相同逻辑

优化点 避免在徨内做运算

情况描述 循环内的计算式将会被重复计算

代码示例 $str = "hello world";

for ($i = 0; $i < strlen($str); $i ++) {
	//
}

优化点 减少计算密集型业务

情况描述 PHP 不适合密集型运算的场景

为什么 PHP 语言特性决定了 PHP 不适合做大数据运算

PHP 适用场景 适合衔接 Webserver 与后端服务 UI 呈现

优化点 务必使用带引号字符串做键值

情况描述 PHP 会将没有引号的键值当作常量 产生查找常量开销

find.php



<?php

/**
    公众号开发中的问题

    需要保证用最快速度回复用户

    需要记录庞大的消息与粉丝

    对各种类型的公众号的权限进行划分 (最近越来越复杂了)

    与微信 api 交互的逻辑


    API 的设计有些缺乏整体规划
    各个模块所属团队间协同不够好
    对第三方平台的考虑还不是很充分


    问题
    url + Token
    开发者无法确定公众号是否正确配置了 Url 与此同时 Token
    无法验证用户提供的 AppID 与 AppSecret
    因为需要账号提供 AppSecret 无法保证安全
    微信方已明确 此种方式只为开发者进行程序测试 不会提供更多支持

    公众号授权
    专为公众号第三方平台而生
    能非常清楚的知道公众号的授权状态
    公众号无需提供 AppSecret 更安全 可靠
    便于权限管理

    与微信同步
    粉丝导入
    图文消息导入与同步
    菜单与自动回复导入与重设 (仅限之前使用微信官方平台的公众号)

    需要关注的地方
    微信 IP 白名单
    权限集
    网页开发域名
    不确定的流量

    保证不超过 5 秒
    采用 Gearman 做消息服务 分发任务
    只保证回复消息的最小开销
    对微信消息的接收域名做特殊的超时处理 并定义超时时的错误信息 (空串等)
    PHP + Nginx
    配置fastcgi_connect_timeout, fastcgi_send_timeout,fastcgi_read_timeout
    error_page 504 / 504.html
    504.html 这个页面保持为空白 (回复空串给微信 这样不会出现 "公众号暂时无法提供服务")
    PHP 脚本会执行完毕 数据不会丢失 可以用超时队列 + 客服消息处理

   Docker
   扩容时间比AWS AutoScaling 快几倍 

   扩展
   传统思路
   仿照WordPress 做插件系统 一个插件一个文件夹 include 进来
   顺序执行
   要用系统的语言编写 并绕过重名类和函数
   要部署在一起

   新的尝试
   插件即服务 RPC
   可顺发可并发
   插件用什么语言写都没事儿
   不怕报错
   插件与系统可以跨公网通讯 开发者可以贡献力量 (SAE + 开放平台)

   功能多了怎么办
   大部分功能其实只能顺序执行
   执行过程就像过一道一道的 "关卡"
   每一次从接收消息到回复都有可能跑完所有的 "关卡"
   又会引起 "5s" 问题

   插件优先级系统
   牺牲插件的灵活性 注册匹配规则到系统
   牺牲插件的灵活性 尽量让每一个功能都有一个触发词或者按钮 KEY
   上一次被调用的插件 保证会话连续
   可并发的插件改用并发调用

   坑
   群发的微信会推送针对每一个 OPENID 的发送情况 挤爆了服务器
   一定要采用公众号 AppID 用为唯一的公众号标识 否则重复授权很麻烦
   微信最近开了图片消息中图片的防盗链 要特别处理
   一定要对每一个公众号区分网页域名 例如 $APPID$.mp.weixinhost.com
   微信各种 API 的调用上限 (例如获取某个 OPENID 分组消息)
*/